import math
import numpy as np
import operator
import random
from functools import reduce
from matplotlib import pyplot as plt
from matplotlib.scale import LogScale
from matplotlib.ticker import FormatStrFormatter
from os import path
from scipy import stats

from mis_combinations import *
from sampling_functions import *


INTEGRAND_COLOR                 = "#55A868"
UNIFORM_COLOR                   = "#4C72B0"
SAMPLING_DIST_COLOR             = "#C44E52"
RIS_SAMPLES_COLOR               = "purple"
SCATTER_PLT_CIRCLE_SIZE_SMALL   = 25
SCATTER_PLT_CIRCLE_SIZE         = 50
SCATTER_PLT_CIRCLE_SIZE_BIG     = 75
SAMPLING_POINTS                 = 16
IMAGES_DIR                      = path.join("images", "sampling-visualisations")

def _importance_sampling_example():
    # Set same random seed for inter-run consistency
    random.seed(53845934)

    # Set domain size
    x_axis = np.linspace(-0.00001, 1.00001, 256)

    # Normal distribution centered at 0.5
    mean        = 0.5
    variance    = 0.06
    std_dev     = math.sqrt(variance)
    plt.plot(x_axis, stats.norm.pdf(x_axis, mean, std_dev), label="Integrand function", color=INTEGRAND_COLOR)

    # Uniform distribution across whole domain
    constant        = ConstantDistribution(0, 1)
    constant_vals   = list(map(constant.evaluate, x_axis))
    plt.plot(x_axis, constant_vals, label="Uniform distribution", color=UNIFORM_COLOR)

    # Spikey distribution conforming more closely to normal distribution
    spikey      = SpikeyDistribution([Spike(0, 1, 2)])
    spikey_vals = list(map(spikey.evaluate, x_axis))
    plt.plot(x_axis, spikey_vals, label="Sampling distribution", color=SAMPLING_DIST_COLOR)

    # Save figure of curves
    file_path = path.join(IMAGES_DIR, "importance-sampling-example.png")
    plt.legend()
    plt.savefig(file_path)
    plt.clf()

    # Save figure of points generated by distributions
    file_path           = path.join(IMAGES_DIR, "importance-sampling-example-samples.png")
    constant_samples    = [constant.sample()    for _ in range(SAMPLING_POINTS)]
    spikey_samples      = [spikey.sample()      for _ in range(SAMPLING_POINTS)]
    plt.plot(x_axis,                stats.norm.pdf(x_axis, mean, std_dev),              label="Integrand function",
             color=INTEGRAND_COLOR,         zorder=1)
    plt.scatter(constant_samples,   stats.norm.pdf(constant_samples, mean, std_dev),    label="Uniform distribution",
                color=UNIFORM_COLOR,        zorder=2,   s=SCATTER_PLT_CIRCLE_SIZE)
    plt.scatter(spikey_samples,     stats.norm.pdf(spikey_samples, mean, std_dev),      label="Sampling distribution",
                color=SAMPLING_DIST_COLOR,  zorder=2,   s=SCATTER_PLT_CIRCLE_SIZE)
    plt.legend()
    plt.savefig(file_path)
    plt.clf()


def _importance_sampling_convergence_example():
    # Set same random seed for inter-run consistency
    random.seed(3674457334)

    # Sampling distributions
    constant    = ConstantDistribution(0, 1)            # Uniform distribution across whole domain
    spikey      = SpikeyDistribution([Spike(0, 1, 2)])  # Spikey distribution conforming more closely to normal distribution

    # Integrand function. Normal distribution centered at 0.5
    mean        = 0.5
    variance    = 0.06
    std_dev     = math.sqrt(variance)

    # Compute exact integral in domain [0, 1] and MC estimates for increasing sample counts
    # using our two distributions. Average several realisation of estimators to smooth out noise
    TRIALS          = 256
    cdf_vals        = stats.norm.cdf([0, 1], mean, std_dev)
    integral        = cdf_vals[1] - cdf_vals[0]
    sample_counts   = [int(2**i) for i in range(1, 8)]
    mse_constant    = []
    mse_spikey      = []
    for count in sample_counts:
        average_mse_constant = average_mse_spikey = 0
        for _ in range(TRIALS):
            samples_const           = [constant.sample()    for _ in range(count)]
            samples_spikey          = [spikey.sample()      for _ in range(count)]
            evals_const             = stats.norm.pdf(samples_const, mean, std_dev)
            evals_spikey            = stats.norm.pdf(samples_spikey, mean, std_dev)
            estimate_const          = (1 / count) * reduce(operator.add, evals_const, 0)
            estimate_spikey         = (1 / count) * reduce(lambda acc, pair: acc + (pair[1] / spikey.evaluate(pair[0])), zip(samples_spikey, evals_spikey), 0)
            average_mse_constant    += (integral - estimate_const)**2
            average_mse_spikey      += (integral - estimate_spikey)**2
        mse_constant.append(average_mse_constant / TRIALS)
        mse_spikey.append(average_mse_spikey / TRIALS)
    
    # Plot MSE variation with respect to sample count
    file_path = path.join(IMAGES_DIR, "importance-sampling-convergence.png")
    plt.plot(sample_counts, mse_constant,   label="Uniform distribution")
    plt.plot(sample_counts, mse_spikey,     label="Sampling distribution", color='#C2464A') # Matches with red of original example plot
    plt.xlabel("Number of samples")
    plt.xscale(LogScale(None, base=2))
    plt.gca().xaxis.set_major_formatter(FormatStrFormatter('%d'))
    plt.ylabel("MSE (Mean Squared Error)")
    plt.yscale("log")
    plt.legend()
    plt.savefig(file_path)
    plt.clf()


def _importance_sampling_support_example():
    # Set same random seed for inter-run consistency
    random.seed(1243763214)

    x_axis = np.linspace(-0.00001, 1.00001, 256)

    # Integrand function: Normal distribution centered at 0.5
    mean        = 0.5
    variance    = 0.06
    std_dev     = math.sqrt(variance)
    plt.plot(x_axis, stats.norm.pdf(x_axis, mean, std_dev), label="Integrand function", color=INTEGRAND_COLOR)

    # Uniform distribution not covering the entire support of the integrand function
    constant        = ConstantDistribution(0.3, 0.7)
    constant_vals   = list(map(constant.evaluate, x_axis))
    plt.plot(x_axis, constant_vals, label="Sampling distribution", color=UNIFORM_COLOR)

    # Save figure of curves
    file_path = path.join(IMAGES_DIR, "importance-sampling-support-example.png")
    plt.legend()
    plt.savefig(file_path)
    plt.clf()

    # Save figure of samples drawn from distribution
    file_path           = path.join(IMAGES_DIR, "importance-sampling-support-example-samples.png")
    constant_samples    = [constant.sample() for _ in range(SAMPLING_POINTS)]
    plt.plot(x_axis, stats.norm.pdf(x_axis, mean, std_dev), label="Integrand function", color=INTEGRAND_COLOR, zorder=1)
    plt.scatter(constant_samples, stats.norm.pdf(constant_samples, mean, std_dev), label="Sampling distribution",
                color=UNIFORM_COLOR, zorder=2, s=SCATTER_PLT_CIRCLE_SIZE)
    plt.legend()
    plt.savefig(file_path)
    plt.clf()


def _mis_example():
    # Set same random seed for inter-run consistency
    random.seed(2342342)

    # Set domain size
    x_axis = np.linspace(-0.00001, 1.00001, 256)

    # Integrand function
    mean        = 0.5
    variance    = 0.03
    std_dev     = math.sqrt(variance)
    plt.plot(x_axis, stats.norm.pdf(x_axis, mean, std_dev), label="Integrand function", color=INTEGRAND_COLOR)

    # First sampling distribution
    spikey   = SpikeyDistribution([Spike(0.25, 0.75, 4)])
    spikey_vals = list(map(spikey.evaluate, x_axis))
    plt.plot(x_axis, spikey_vals, label="Sampling distribution α", color=SAMPLING_DIST_COLOR)

    # Second sampling distribution
    uniform         = ConstantDistribution(0, 1)
    uniform_vals    = list(map(uniform.evaluate, x_axis))
    plt.plot(x_axis, uniform_vals, label="Sampling distribution β", color=UNIFORM_COLOR)

    # Save the figure and clear the plotting canvas
    file_path = path.join(IMAGES_DIR, "mis-example.png")
    plt.legend()
    plt.savefig(file_path)
    plt.clf()

    # Save figure of points plotted by distributions
    file_path       = path.join(IMAGES_DIR, "mis-example-samples.png")
    uniform_samples = [uniform.sample() for _ in range(int(SAMPLING_POINTS / 2))]
    spikey_samples  = [spikey.sample()  for _ in range(int(SAMPLING_POINTS / 2))]
    plt.plot(x_axis,                stats.norm.pdf(x_axis, mean, std_dev),          label="Integrand function",
             color=INTEGRAND_COLOR, zorder=1)
    plt.scatter(spikey_samples,     stats.norm.pdf(spikey_samples, mean, std_dev),  label="Sampling distribution α",
                color=SAMPLING_DIST_COLOR,  zorder=2, s=SCATTER_PLT_CIRCLE_SIZE_BIG)
    plt.scatter(uniform_samples,    stats.norm.pdf(uniform_samples, mean, std_dev), label="Sampling distribution β",
                color=UNIFORM_COLOR,        zorder=2, s=SCATTER_PLT_CIRCLE_SIZE_BIG)
    plt.legend()
    plt.savefig(file_path)
    plt.clf()


def _mis_example_alternative():
    x_axis = np.linspace(-0.00001, 1.00001, 512)

    # Integrand function
    spikey      = SpikeyDistribution([Spike(0.1, 0.4, 5), Spike(0.4, 0.5, 2), Spike(0.5, 0.6, 5), Spike(0.6, 0.9, 5)])
    spikey_vals = list(map(spikey.evaluate, x_axis))
    plt.plot(x_axis, spikey_vals, label="Integrand function", linestyle='dashdot')

    # First sampling distribution
    constant_1      = ConstantDistribution(0.1, 0.6)
    constant_1_vals = list(map(constant_1.evaluate, x_axis))
    plt.plot(x_axis, constant_1_vals, label="Sampling distribution α")

    # Second sampling distribution
    constant_2      = ConstantDistribution(0.5, 0.9)
    constant_2_vals = list(map(constant_2.evaluate, x_axis))
    plt.plot(x_axis, constant_2_vals, label="Sampling distribution β")

    # Save the figure and clear the plotting canvas
    file_path = path.join(IMAGES_DIR, "mis-example-alternative.png")
    plt.legend()
    plt.savefig(file_path)
    plt.clf()


def _ris_example():
    # Set same random seed for inter-run consistency
    RANDOM_SEED = 438232
    random.seed(RANDOM_SEED)
    np.random.seed(RANDOM_SEED)

    x_axis = np.linspace(-0.00001, 1.00001, 256)

    # Uniform drawing distribution across whole domain
    constant        = ConstantDistribution(0, 1)
    constant_vals   = list(map(constant.evaluate, x_axis))
    plt.plot(x_axis, constant_vals, label="Sampling distribution", color=UNIFORM_COLOR)

    # Spikey target distribution conforming more closely to normal distribution
    spikey      = SpikeyDistribution([Spike(0.25, 0.75, 4)])
    spikey_vals = list(map(spikey.evaluate, x_axis))
    plt.plot(x_axis, spikey_vals, label="Target function", color='green')

    # Save target function and sampling distribution plot
    file_path = path.join(IMAGES_DIR, "ris-example-sampling-and-target.png")
    plt.legend()
    plt.savefig(file_path)
    plt.clf()

    # Draw samples from uniform distribution and plot them alongside target function values
    NUM_DRAWN_SAMPLES       = 128
    drawn_samples           = [constant.sample() for _ in range(NUM_DRAWN_SAMPLES)]
    target_function_values  = [spikey.evaluate(sample) for sample in drawn_samples]
    file_path               = path.join(IMAGES_DIR, "ris-example-sampling-and-target-samples.png")
    plt.plot(x_axis, spikey_vals, label="Target function", color='green', zorder=1)
    plt.scatter(drawn_samples, target_function_values, label="Sampling distribution", color=UNIFORM_COLOR, zorder=2, s=SCATTER_PLT_CIRCLE_SIZE_SMALL)
    plt.legend()
    plt.savefig(file_path)
    plt.clf()

    # Draw samples via RIS with equal MIS weights for all candidates
    RESAMPLED_COUNTS        = [1, 2, 4, 8]
    augmented_samples       = [SampleDrawn(sample, constant, spikey) for sample in drawn_samples]
    equal_weights           = [1 / NUM_DRAWN_SAMPLES for _ in range(NUM_DRAWN_SAMPLES)]
    selected_samples        = ris(augmented_samples, equal_weights, spikey.evaluate, max(RESAMPLED_COUNTS))
    selected_samples_values = np.array(list(map(lambda x: x.value, selected_samples)))

    # Plot an increasing number of the RIS-drawn samples
    x_axis_unit         = np.linspace(0, 1, 256)
    x_axis_unit         = x_axis_unit.reshape((256, 1))
    for resample_count in RESAMPLED_COUNTS:
        # Select subset from RIS-drawn samples
        x_vals  = selected_samples_values[0:resample_count]
        y_vals  = [spikey.evaluate(sample) for sample in x_vals]
        
        # Save the figure and clear the plotting canvas
        file_path = path.join(IMAGES_DIR, f"ris-example-{resample_count}-sample.png")
        plt.plot(x_axis,    spikey_vals,    label="Target function",                    color=INTEGRAND_COLOR,      zorder=1)
        plt.scatter(x_vals, y_vals,         label=f"RIS - {resample_count} sample(s)",  color=RIS_SAMPLES_COLOR,    zorder=2, s=SCATTER_PLT_CIRCLE_SIZE)
        plt.legend()
        plt.savefig(file_path)
        plt.clf()
        

def _jacobian_example():
    function    = lambda x: x**2

    # Plot the function
    x_axis  = np.linspace(0, 5, 256)
    y_axis  = list(map(function, x_axis))
    plt.plot(x_axis, y_axis)

    # Plot principal axes
    plt.plot([0, 0, 5], [function(5), 0, 0], color='#404040')

    # Plot lines showing discrete values transformed by the function
    inputs      = np.linspace(1, 5, 10)
    outputs     = list(map(function, inputs))
    for x, y in zip(inputs, outputs):
        plt.plot([x, x], [0, y], linestyle='--', color='#ff7f0e')   # Line from x-axis to function
        plt.plot([x, 0], [y, y], linestyle='--', color='#2ca02c')   # Line from y-axis to function

    # Save the figure and clear the plotting canvas
    file_path = path.join(IMAGES_DIR, "jacobian-pdf-example.png")
    plt.savefig(file_path)
    plt.clf()


if __name__ == "__main__":
    # Style settings for all plots
    SMALL_SIZE  = 16
    MEDIUM_SIZE = 20
    BIGGER_SIZE = 28
    plt.style.use("seaborn-v0_8")
    plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
    plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
    plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
    plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
    plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
    plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
    plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title

    _importance_sampling_example()
    _importance_sampling_convergence_example()
    _importance_sampling_support_example()
    _mis_example()
    _mis_example_alternative()
    _ris_example()
    _jacobian_example()
